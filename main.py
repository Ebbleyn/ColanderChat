import asyncio
import json
import re
from datetime import datetime, timedelta

from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, run_js

# –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
chat_msgs = []
online_users = set()
muted_users = {}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
MAX_MESSAGES_COUNT = 100
USER_DATA_FILE = "user_data.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
URL_PATTERN = re.compile(r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+')
MENTION_PATTERN = re.compile(r'@([a-zA-Z0-9_]+)')  # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π



# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON
def load_user_data():
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON
def save_user_data(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_system_message(message):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML
    """
    message_html = f"""
    <div style="background-color: #e0f7fa; padding: 10px; margin-bottom: 10px; border-radius: 10px; font-style: italic;">
        üì¢ {message}
    </div>
    """
    chat_msgs.append(("üì¢", message_html))

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —á–∞—Ç–∞
async def main():
    global chat_msgs, muted_users

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_accounts = load_user_data()

    put_markdown("## üßä Colander Chat | Private Demo test")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–í—Ö–æ–¥
    while True:
        action = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–í—ã—Ö–æ–¥"])
        if action == "–í—ã—Ö–æ–¥":
            put_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")
            return

        if action == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            account = await input_group("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", [
                input("–í–∞—à–µ –∏–º—è", name="nickname", required=True,
                      validate=lambda n: "–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!" if n in user_accounts else None),
                input("–ü–∞—Ä–æ–ª—å", name="password", type=PASSWORD, required=True),
            ])


            save_user_data(user_accounts)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            toast("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.")
        elif action == "–í—Ö–æ–¥":
            account = await input_group("–í—Ö–æ–¥", [
                input("–í–∞—à–µ –∏–º—è", name="nickname", required=True),
                input("–ü–∞—Ä–æ–ª—å", name="password", type=PASSWORD, required=True)
            ])

            nickname = account["nickname"]
            password = account["password"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
            if nickname not in user_accounts or user_accounts[nickname]["password"] != password:
                toast("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫ –∏–ª–∏ –ø–∞—Ä–æ–ª—å!", color="error")
            else:
                is_admin = user_accounts[nickname].get("admin", False)
                break

    online_users.add(nickname)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–¥–∏–Ω —Ä–∞–∑)
    if is_admin:
        msg_box.append(put_html(send_system_message(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä `{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!')))
    else:
        msg_box.append(put_html(send_system_message(f"`{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!")))

    refresh_task = run_async(refresh_msg(nickname, msg_box))

    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (mute)
        if nickname in muted_users and muted_users[nickname] > datetime.now():
            toast("–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.", color="error")
            await asyncio.sleep(10000)
            continue

        data = await input_group("üí≠ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", [
            input(placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ...", name="msg"),
            actions(name="cmd", buttons=["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", {'label': "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", 'type': 'cancel'}])
        ], validate=lambda m: ('msg', "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!") if m["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not m['msg'] else None)

        if data is None:
            break

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if data["msg"].startswith("/") and is_admin:
            command = data["msg"].split()
            if len(command) > 0:
                if command[0] == "/mute" and len(command) == 3:
                    username = command[1]
                    try:
                        mute_time = int(command[2])
                        mute_until = datetime.now() + timedelta(seconds=mute_time)
                        muted_users[username] = mute_until
                        msg_box.append(put_html(send_system_message(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {mute_time} —Å–µ–∫—É–Ω–¥.')))
                    except ValueError:
                        msg_box.append(put_html(send_system_message("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –º—å—é—Ç–∞.")))
                elif command[0] == "/unmute" and len(command) == 2:
                    username = command[1]
                    if username in muted_users:
                        del muted_users[username]
                        msg_box.append(put_html(send_system_message(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` —Ä–∞–∑–º—å—é—á–µ–Ω.')))
                    else:
                        msg_box.append(put_html(send_system_message(f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")))
                elif command[0] == "/help":
                    help_text = (
                        "/mute (username) (time) - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n"
                        "/unmute (username) - —Ä–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"

                    )
                    msg_box.append(put_html(send_system_message(help_text)))
                else:
                    msg_box.append(put_html(send_system_message("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")))
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        message_text = data["msg"]

        # –ó–∞–º–µ–Ω—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Ü–≤–µ—Ç–Ω—ã–µ
        def replace_mentions(match):
            username = match.group(1)
            if username in online_users:
                return f"<span style='color: blue'>@{username}</span>"
            return f"@{username}"

        message_text = re.sub(MENTION_PATTERN, replace_mentions, message_text)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
        urls = re.findall(URL_PATTERN, message_text)
        if urls:
            for url in urls:
                message_text = message_text.replace(url, f"{url}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_html = f"""
        <div style="background-color: #f0f0f0; padding: 10px; margin-bottom: 10px; border-radius: 10px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
            <strong>{nickname}</strong>: {message_text}
        </div>
        """
        msg_box.append(put_html(message_html))
        chat_msgs.append((nickname, message_html))

    refresh_task.close()
    online_users.remove(nickname)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    msg_box.append(put_html(send_system_message(f'`{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!')))
    put_buttons(['–ü–µ—Ä–µ–∑–∞–π—Ç–∏'], onclick=lambda btn: run_js('window.location.reload()'))
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π


async def refresh_msg(nickname, msg_box):
    global chat_msgs
    last_idx = 0  # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    displayed_messages = []  # –°–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    while True:
        await asyncio.sleep(1)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_msgs = chat_msgs[last_idx:]

        for sender, raw_message in new_msgs:
            if sender != nickname:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                def highlight_mentions(match):
                    mentioned_user = match.group(1)
                    if mentioned_user == nickname:
                        return f"<span style='color: blue'>@{mentioned_user}</span>"
                    return f"@{mentioned_user}"

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                personalized_message = re.sub(MENTION_PATTERN, highlight_mentions, raw_message)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å
                if personalized_message not in displayed_messages:
                    msg_box.append(put_html(personalized_message))
                    displayed_messages.append(personalized_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_idx = len(chat_msgs)

        # –£—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø–∞–º—è—Ç—å
        if len(chat_msgs) > MAX_MESSAGES_COUNT:
            chat_msgs = chat_msgs[-MAX_MESSAGES_COUNT:]



if __name__ == "__main__":
    start_server(main, debug=True, port=80, cdn=True, host='0.0.0.0',)


